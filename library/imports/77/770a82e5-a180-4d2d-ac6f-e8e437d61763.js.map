{"version":3,"sources":["assets/scripts/src/features/SliceUser.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { ELOMessage, MsgUpdateAvatar } from \"@elofun/elo-services-myid-v2\";\nimport { EMsgTypes } from \"@elofun/elo-services-myid-v2/EMsgTypes\";\nimport { createSlice, PayloadAction, createSelector } from \"@reduxjs/toolkit\";\nimport Events from \"../../common/Events\";\nimport { EUserProfileEventTypes, IUserProfile, userProfile } from \"../../common/UserProfile\";\nimport store from \"../app/store\";\nimport { Buffer } from 'buffer/';\nimport wsgw from \"../app/wsgw\";\n\nexport interface IExchangeGreenCash {\n    oldCash: number,\n    voucherCode: string,\n}\nexport interface IUserState extends IUserProfile {\n    accumulatedCoinBalance: number;\n    isLogged: Boolean;\n    gameEvents: Array<number>,\n    claimGreenCash?: IExchangeGreenCash,\n    dailyReward?: any,\n    dayPoint: number,\n    dayRank: number,\n    monthPoint: number,\n    monthRank: number,\n    globalRank: number,\n    globalPoint: number,\n    customerType: string,\n    verifiedUser: boolean,\n    isNewUser: boolean,\n    customerSourceLinked: boolean,\n}\nexport const initUserState: IUserState = {\n    userId: \"\",\n    avatar: 'n/a',\n    nickName: 'n/a',\n    coinBalance: 0,\n    accumulatedCoinBalance: 0,\n    isLogged: false,\n    isVip: false,\n    credential: 'n/a',\n    spinTicketBalance: 0,\n    greenCashBalance: 0,\n    isRedeemInviteCode: false,\n    omsToken: '',\n    wheelBalance: 0,\n    gameEvents: [],\n    claimGreenCash: undefined,\n    starBalance: 0,\n    dayPoint: 0,\n    dayRank: 1,\n    monthPoint: 0,\n    monthRank: 1,\n    globalPoint: 0,\n    globalRank: 1,\n    customerType: '',\n    verifiedUser: false,\n    isNewUser: false,\n    customerSourceLinked: false,\n};\nconst user = createSlice({\n    name: 'user',\n    initialState: initUserState,\n    reducers: {\n        testUser(state, { payload }: PayloadAction<string>) {\n            state.nickName = payload;\n        },\n        syncDailyReward(state, { payload }) {\n            state.dailyReward = payload\n        },\n        selectAvatar(state, { payload }: PayloadAction<string>) {\n            if (payload !== state.avatar) {\n                // const msg = ELOMessage.get<MsgUpdateAvatar>(\n                //     EMsgTypes.MSG_UPDATE_AVATAR\n                // );\n                // msg.url = Buffer.from(payload);\n                // eloServices.send(msg);\n                state.avatar = payload\n            }\n        },\n        syncProfile(state, { payload }: PayloadAction<any>) {\n            return {\n                ...state,\n                ...payload,\n                nickName: payload.nickName ? payload.nickName.replace(/^\\+?(84|0)/g, '0') : ''\n            }\n        },\n        syncBalances(state, { payload }: PayloadAction<{ coinBalance: number, spinTicketBalance: number }>) {\n            return {\n                ...state,\n                ...payload,\n            }\n        },\n        syncCoins(state, { payload }: PayloadAction<number>) {\n            state.coinBalance = payload\n        },\n        syncStars(state, { payload }: PayloadAction<number>) {\n            state.starBalance = payload\n        },\n        exchangeGreenCash(state, { payload }: PayloadAction<IExchangeGreenCash>) {\n            state.claimGreenCash = payload\n        },\n        claimGreenCash(state) {\n            state.claimGreenCash = undefined\n        },\n        syncRegisterEvent(state, { payload }: PayloadAction<Array<number>>) {\n            for (let game of payload) {\n                if (!state.gameEvents.includes(game)) state.gameEvents.push(game)\n            }\n        },\n        syncDayRank(state, { payload }: PayloadAction<{ rank: number, point: number }>) {\n            const { point, rank } = payload\n            state.dayRank = rank;\n            state.dayPoint = point;\n        },\n        syncMonthRank(state, { payload }: PayloadAction<{ rank: number, point: number }>) {\n            const { point, rank } = payload\n            state.monthRank = rank;\n            state.monthPoint = point;\n        },\n        syncGlobalRank(state, { payload }: PayloadAction<{ rank: number, point: number }>) {\n            const { point, rank } = payload\n            state.globalRank = rank;\n            state.globalPoint = point;\n        },\n    }\n})\n\nexport const { testUser, syncProfile, selectAvatar,\n    syncRegisterEvent, exchangeGreenCash, claimGreenCash,\n    syncDailyReward, syncBalances,\n    syncCoins, syncStars, syncDayRank, syncMonthRank, syncGlobalRank\n} = user.actions;\nexport default user.reducer;"]}