{"version":3,"sources":["assets/scripts/src/game/SessionLengthCount.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,wEAAwE;AACxE,mBAAmB;AACnB,kFAAkF;AAClF,8BAA8B;AAC9B,kFAAkF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,8CAAyC;AACzC,oCAA+B;AAC/B,2DAAsD;AAEhD,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAgD,sCAAY;IAA5D;QAAA,qEA0BC;QAxBW,mBAAa,GAAG,CAAC,CAAC;;IAwB9B,CAAC;IAtBG,mCAAM,GAAN;QAAA,iBAiBC;QAhBG,IAAM,iBAAiB,GAAG,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACpE,IAAI,iBAAiB,IAAI,iBAAiB,KAAK,MAAM,EAAE;YACnD,cAAI,CAAC,WAAW,CACZ,mBAAS,CAAC,KAAK,EACf;gBACI,SAAS,EAAE,wBAAc,CAAC,cAAc,CAAC,cAAc;gBACvD,IAAI,EAAE,iBAAiB;aAC1B,EACD,UAAC,CAAC,IAAO,OAAO,CAAC,GAAG,CAAC,gBAAc,wBAAc,CAAC,cAAc,CAAC,cAAc,WAAM,iBAAmB,CAAC,CAAA,CAAC,CAAC,EAC3G,OAAO,CAAC,KAAK,CAChB,CAAC;SACL;QAED,MAAM,CAAC,gBAAgB,CAAC,cAAc,EAAE,UAAO,KAAK;;gBAChD,YAAY,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;;;aAC5E,CAAC,CAAC;IACP,CAAC;IAED,mCAAM,GAAN,UAAO,EAAU;QACb,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC;IAC7B,CAAC;IAzBgB,kBAAkB;QADtC,OAAO;OACa,kBAAkB,CA0BtC;IAAD,yBAAC;CA1BD,AA0BC,CA1B+C,EAAE,CAAC,SAAS,GA0B3D;kBA1BoB,kBAAkB","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport APIDefine from \"../app/APIDefine\";\nimport wsgw from \"../app/wsgw\";\nimport TrackingDefine from \"../common/TrackingDefine\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class SessionLengthCount extends cc.Component {\n\n    private sessionLength = 0;\n\n    onLoad() {\n        const lastSessionLength = localStorage.getItem('lastSessionLength');\n        if (lastSessionLength && lastSessionLength !== 'null') {\n            wsgw.userRequest(\n                APIDefine.track,\n                {\n                    eventName: TrackingDefine.TrackingEvents.SESSION_LENGTH,\n                    data: lastSessionLength\n                },\n                (e) => { console.log(`TRACKING - ${TrackingDefine.TrackingEvents.SESSION_LENGTH} - ${lastSessionLength}`) },\n                console.error\n            );\n        }\n\n        window.addEventListener('beforeunload', async (event) => {\n            localStorage.setItem('lastSessionLength', this.sessionLength.toString());\n        });\n    }\n\n    update(dt: number) {\n        this.sessionLength += dt;\n    }\n}\n"]}