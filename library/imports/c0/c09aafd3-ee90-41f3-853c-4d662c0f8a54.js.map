{"version":3,"sources":["assets/scripts/src/game/InteractDetect.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,wEAAwE;AACxE,mBAAmB;AACnB,kFAAkF;AAClF,8BAA8B;AAC9B,kFAAkF;;;;;;;;;;;;;;;;AAGlF,2DAAsD;AACtD,0CAAqC;AACrC,sCAA6D;AAC7D,mDAA8C;AAC9C,iDAAiI;AACjI,qDAAsD;AAEhD,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAE5C;IAAuC,qCAAkC;IAAzE;QAAA,qEAsCC;QAlCW,mBAAa,GAAG,oBAAU,CAAC,YAAY,CAAC;QACxC,kBAAY,GAAG,KAAK,CAAC;;IAiCjC,CAAC;IA/BG,kCAAM,GAAN;QACI,IAAI,CAAC,qBAAqB,EAAE,CAAC;IACjC,CAAC;IAED,iDAAqB,GAArB;QAAA,iBAUC;QATG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,UAAC,KAAK;YACtD,KAAI,CAAC,aAAa,GAAG,oBAAU,CAAC,YAAY,CAAC;QACjD,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACf,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,UAAC,KAAK;YACrD,KAAI,CAAC,aAAa,GAAG,oBAAU,CAAC,YAAY,CAAC;QACjD,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACf,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,UAAC,KAAK;YACpD,KAAI,CAAC,aAAa,GAAG,oBAAU,CAAC,YAAY,CAAC;QACjD,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACnB,CAAC;IAES,kCAAM,GAAhB,UAAiB,EAAU;QACvB,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,OAAO;SACV;QAED,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC;QACzB,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;YACxB,eAAK,CAAC,QAAQ,CAAC,oBAAS,CAAC,qBAAU,CAAC,gBAAgB,CAAC,CAAC,CAAA;YACtD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC5B;IACL,CAAC;IAEM,iCAAK,GAAZ;QACI,IAAI,CAAC,aAAa,GAAG,oBAAU,CAAC,YAAY,CAAC;IACjD,CAAC;IACL,wBAAC;AAAD,CAtCA,AAsCC,CAtCsC,uBAAa,EAAqB,GAsCxE;AAtCY,8CAAiB;AAwC9B,IAAM,eAAe,GAAG,UAAC,KAAgB,IAAK,OAAA,CAAC;IAC3C,KAAK,EAAE,KAAK,CAAC,KAAK;CACrB,CAAC,EAF4C,CAE5C,CAAA;AACF,IAAM,mBAAmB,GAAG,UAAC,QAAqB,IAAK,OAAA,CAAC;IACpD,QAAQ,EAAE,cAAM,OAAA,QAAQ,CAAC,mBAAQ,EAAE,CAAC,EAApB,CAAoB;IACpC,SAAS,EAAE,UAAC,CAAC,IAAK,OAAA,QAAQ,CAAC,oBAAS,CAAC,CAAC,CAAC,CAAC,EAAtB,CAAsB;IACxC,YAAY,EAAE,cAAM,OAAA,QAAQ,CAAC,yBAAY,EAAE,CAAC,EAAxB,CAAwB;CAC/C,CAAC,EAJqD,CAIrD,CAAA;AAEF,kBAAe,iBAAO,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC,iBAAiB,CAAC,CAAA","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport TopUI from \"../../common/TopUI\";\nimport SingletonNode from \"../../utils/SingletonNode\";\nimport connect from \"../app/connect\";\nimport store, { AppDispatch, RootState } from \"../app/store\";\nimport GameDefine from \"../common/GameDefine\";\nimport { EAppPages, EAppPopups, IPageWithEffect, popPage, popPopup, popToPage, pushPage, pushPopup } from \"../features/SliceApp\";\nimport { refreshError } from \"../features/SliceError\";\n\nconst { ccclass, property } = cc._decorator;\n\nexport class InteractDetection extends SingletonNode<InteractDetection>() {\n    props: RootState\n    actions: any;\n\n    private idleCountDown = GameDefine.IDLE_TIMEOUT;\n    private isPopupShown = false;\n\n    onLoad() {\n        this.initDetectInteraction();\n    }\n\n    initDetectInteraction() {\n        cc.find(\"Canvas\").on(cc.Node.EventType.TOUCH_START, (event) => {\n            this.idleCountDown = GameDefine.IDLE_TIMEOUT;\n        }, this, true);\n        cc.find(\"Canvas\").on(cc.Node.EventType.TOUCH_MOVE, (event) => {\n            this.idleCountDown = GameDefine.IDLE_TIMEOUT;\n        }, this, true);\n        cc.find(\"Canvas\").on(cc.Node.EventType.TOUCH_END, (event) => {\n            this.idleCountDown = GameDefine.IDLE_TIMEOUT;\n        }, this, true);\n    }\n\n    protected update(dt: number): void {\n        if (this.isPopupShown) {\n            return;\n        }\n\n        this.idleCountDown -= dt;\n        if (this.idleCountDown < 0) {\n            store.dispatch(pushPopup(EAppPopups.PopupIdleTooLong))\n            this.isPopupShown = true;\n        }\n    }\n\n    public reset() {\n        this.idleCountDown = GameDefine.IDLE_TIMEOUT;\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    error: state.error\n})\nconst mapDispatchToAction = (dispatch: AppDispatch) => ({\n    popPopup: () => dispatch(popPopup()),\n    popToPage: (e) => dispatch(popToPage(e)),\n    refreshError: () => dispatch(refreshError())\n})\n\nexport default connect(mapStateToProps, mapDispatchToAction)(InteractDetection)\n"]}