{"version":3,"sources":["assets/scripts/src/game/ConnectionDectect.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,wEAAwE;AACxE,mBAAmB;AACnB,kFAAkF;AAClF,8BAA8B;AAC9B,kFAAkF;;;;;;;;;;;;;;;;;;;;;AAGlF,sCAAiC;AACjC,iDAA6D;AAEvD,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAA+C,qCAAY;IAA3D;;IA+BA,CAAC;IA7BG,6CAAiB,GAAjB,UAAkB,MAAM,EAAE,GAAG;QACzB,IAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;QAC/B,IAAI,iBAAiB,IAAI,GAAG,EAAE;YAE1B,uEAAuE;YACvE,4DAA4D;YAC5D,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAE/B;aAAM;YAEH,mDAAmD;YACnD,GAAG,GAAG,IAAI,CAAC;SAEd;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED,kCAAM,GAAN;QAAA,iBAUC;QATG,WAAW,CAAC;YACR,IAAI,IAAI,GAAG,KAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;YAC7C,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;YACnD,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;gBACnB,IAAA,MAAM,GAAK,IAAI,OAAT,CAAU;gBACxB,eAAK,CAAC,QAAQ,CAAC,oBAAS,CAAC,qBAAU,CAAC,mBAAmB,CAAC,CAAC,CAAA;YAC7D,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IA7BgB,iBAAiB;QADrC,OAAO;OACa,iBAAiB,CA+BrC;IAAD,wBAAC;CA/BD,AA+BC,CA/B8C,EAAE,CAAC,SAAS,GA+B1D;kBA/BoB,iBAAiB","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport internal = require(\"stream\");\nimport store from \"../app/store\";\nimport { EAppPopups, pushPopup } from \"../features/SliceApp\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ConnectionDectect extends cc.Component {\n\n    createCORSRequest(method, url) {\n        var xhr = new XMLHttpRequest();\n        if (\"withCredentials\" in xhr) {\n\n            // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n            // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n            xhr.open(method, url, true);\n\n        } else {\n\n            // Otherwise, CORS is not supported by the browser.\n            xhr = null;\n\n        }\n        return xhr;\n    }\n\n    onLoad() {\n        setInterval(() => {\n            var oReq = this.createCORSRequest('HEAD', '')\n            oReq.setRequestHeader(\"Cache-Control\", \"no-cache\");\n            oReq.addEventListener('error', () => {\n                const { status } = oReq;\n                store.dispatch(pushPopup(EAppPopups.PopupLostConnection))\n            });\n            oReq.send();\n        }, 5000);\n    }\n\n}\n"]}