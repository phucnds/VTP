"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var ELOBufferReader = /** @class */ (function () {
    function ELOBufferReader(buffer, offset) {
        this._buffer = buffer;
        this._pos = offset || 0;
        this._offset = offset || 0;
    }
    ELOBufferReader.prototype.reset = function (buffer) {
        this._pos = this._offset;
        if (buffer) {
            this._buffer = buffer;
        }
    };
    ELOBufferReader.prototype.readSize = function () {
        return this._pos - this._offset;
    };
    ELOBufferReader.prototype.readInt8 = function () {
        var val = this._buffer.readInt8(this._pos);
        if (val > 127) {
            val -= 255;
        }
        this._pos += 1;
        return val;
    };
    ELOBufferReader.prototype.readInt16 = function () {
        var val = this._buffer.readInt16BE(this._pos);
        if (val > 32767) {
            val -= 65535;
        }
        this._pos += 2;
        return val;
    };
    ELOBufferReader.prototype.readInt32 = function () {
        var val = this._buffer.readInt32BE(this._pos);
        if (val > 2147483647) {
            val -= 4294967295;
        }
        this._pos += 4;
        return val;
    };
    ELOBufferReader.prototype.readUInt8 = function () {
        var val = this._buffer.readUInt8(this._pos);
        this._pos += 1;
        return val;
    };
    ELOBufferReader.prototype.readUInt16 = function () {
        var val = this._buffer.readUInt16BE(this._pos);
        this._pos += 2;
        return val;
    };
    ELOBufferReader.prototype.readUInt32 = function () {
        var val = this._buffer.readUInt32BE(this._pos);
        this._pos += 4;
        return val;
    };
    ELOBufferReader.prototype.readFloat = function () {
        var val = this._buffer.readFloatBE(this._pos);
        this._pos += 4;
        return val;
    };
    ELOBufferReader.prototype.readBool = function () {
        var val = this._buffer.readInt8(this._pos);
        this._pos += 1;
        return !!val;
    };
    ELOBufferReader.prototype.readBinary = function () {
        var len = this.readUInt16();
        var val = this._buffer.slice(this._pos, this._pos + len);
        this._pos += len;
        return val;
    };
    ELOBufferReader.prototype.readByType = function (type) {
        switch (type) {
            case types_1.INT8:
                return this.readInt8();
            case types_1.INT16:
                return this.readInt16();
            case types_1.INT32:
                return this.readInt32();
            case types_1.UINT8:
                return this.readUInt8();
            case types_1.UINT16:
                return this.readUInt16();
            case types_1.UINT32:
                return this.readUInt32();
            case types_1.BOOL:
                return this.readBool();
            case types_1.FLOAT:
                return this.readFloat();
        }
        return 0;
    };
    return ELOBufferReader;
}());
exports.ELOBufferReader = ELOBufferReader;
