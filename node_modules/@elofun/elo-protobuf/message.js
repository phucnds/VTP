"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var package_1 = require("./package");
var sInstances = {};
var ELOMessage = /** @class */ (function () {
    function ELOMessage(type, schema) {
        this.__type = type;
        this.__schema = schema;
    }
    ELOMessage.get = function (type) {
        if (!sInstances[type]) {
            throw new Error("Msg type " + type + " not found!");
        }
        sInstances[type].reset();
        return sInstances[type];
    };
    ELOMessage.register = function (msg) {
        sInstances[msg.getType()] = msg;
        return msg;
    };
    ELOMessage.prototype.reset = function () { };
    ELOMessage.prototype.unpack = function (buffer) {
        var props = __rest(package_1.ELOPackage.unpack(this.__schema, buffer), []);
        Object.assign(this, props);
    };
    ELOMessage.unpack = function (buffer) {
        var _a = package_1.ELOPackage.unpack({ type: types_1.UINT16, data: types_1.BINARY }, buffer), type = _a.type, data = _a.data;
        var msg = ELOMessage.get(type);
        if (!msg) {
            throw new Error("Unknown package!");
        }
        msg.unpack(data);
        return msg;
    };
    ELOMessage.prototype.pack = function () {
        var obj = this;
        var data = package_1.ELOPackage.pack(this.__schema, obj);
        var buffer = package_1.ELOPackage.pack({ type: types_1.UINT16, data: types_1.BINARY }, {
            type: this.__type,
            data: data,
        });
        return buffer;
    };
    ELOMessage.prototype.getType = function () {
        return this.__type;
    };
    ELOMessage.prototype.typeOf = function (type) {
        return this.__type === type;
    };
    return ELOMessage;
}());
exports.ELOMessage = ELOMessage;
