"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var package_1 = require("./package");
var assert_1 = __importDefault(require("assert"));
var message_1 = require("./message");
var buffer_1 = require("buffer/");
var schema = {
    type: types_1.UINT8,
    pos: {
        x: types_1.INT16,
        y: types_1.INT16,
        z: {
            a: types_1.INT16
        }
    },
    id: types_1.UINT16,
    lastPost: [
        {
            x: types_1.INT16,
            y: types_1.INT16,
            z: [
                {
                    a: types_1.UINT16,
                    b: types_1.BOOL
                }
            ]
        }
    ]
};
var data = {
    type: 1,
    pos: {
        x: -1234,
        y: 3,
        z: {
            a: 4
        }
    },
    id: 5,
    lastPost: [
        {
            x: 6,
            y: 7,
            z: [
                {
                    a: 8,
                    b: true
                }
            ]
        },
        {
            x: 9,
            y: 10,
            z: [
                {
                    a: 11,
                    b: false
                }
            ]
        }
    ]
};
describe("ELOPackage", function () {
    it("pack & unpack data should be consitent", function () {
        var pack = package_1.ELOPackage.pack(schema, data);
        var unpack = package_1.ELOPackage.unpack(schema, pack);
        console.log({
            pack: pack,
            unpack: unpack,
            data: data
        });
        assert_1.default.equal(JSON.stringify(unpack), JSON.stringify(data));
    });
});
describe("ELOMessage", function () {
    it("pack & unpack", function () {
        message_1.ELOMessage.register(new message_1.ELOMessage(200, schema));
        var msg = message_1.ELOMessage.get(200);
        Object.assign(msg, data);
        var pack = msg.pack();
        var unpackMsg = message_1.ELOMessage.unpack(pack);
        console.log(unpackMsg);
        assert_1.default.equal(data.id, unpackMsg.id);
        assert_1.default.equal(data.lastPost[0].x, unpackMsg.lastPost[0].x);
    });
    it("pack & unpack ELOMsgGSReady should be consitent", function () {
        var ELOMsgGSReady = /** @class */ (function (_super) {
            __extends(ELOMsgGSReady, _super);
            function ELOMsgGSReady() {
                var _this = _super.call(this, 100, {
                    coin: types_1.UINT16,
                    ts: types_1.INT32,
                    name: types_1.BINARY
                }) || this;
                _this.coin = 0;
                _this.ts = 0;
                _this.name = buffer_1.Buffer.from("");
                return _this;
            }
            ELOMsgGSReady.prototype.reset = function () {
                this.coin = 0;
                this.ts = 0;
                this.name = buffer_1.Buffer.from("");
            };
            return ELOMsgGSReady;
        }(message_1.ELOMessage));
        message_1.ELOMessage.register(new ELOMsgGSReady());
        var ELOMsgGSReady2 = /** @class */ (function (_super) {
            __extends(ELOMsgGSReady2, _super);
            function ELOMsgGSReady2() {
                var _this = _super.call(this, 132, {
                    avatar: types_1.BINARY,
                    name: types_1.BINARY,
                    score: types_1.UINT32
                }) || this;
                _this.score = 0;
                _this.name = buffer_1.Buffer.from("");
                _this.avatar = buffer_1.Buffer.from("");
                return _this;
            }
            ELOMsgGSReady2.prototype.reset = function () {
                this.score = 0;
                this.name = buffer_1.Buffer.from("");
                this.avatar = buffer_1.Buffer.from("");
            };
            ELOMsgGSReady2.prototype.test = function () {
                return 100;
            };
            return ELOMsgGSReady2;
        }(message_1.ELOMessage));
        message_1.ELOMessage.register(new ELOMsgGSReady2());
        var pools = [];
        new Array(1024).fill(1).forEach(function () {
            if (Math.random() > 0.5) {
                var data_1 = {
                    coin: Math.floor(Math.random() * 16000),
                    name: "User " + Math.floor(Math.random() * 16000),
                    ts: Math.floor(Math.random() * 160000000)
                };
                var msg = message_1.ELOMessage.get(100);
                Object.assign(msg, data_1);
                var pack = msg.pack();
                pools.push({ pack: pack, data: data_1 });
            }
            else {
                var data_2 = {
                    score: Math.floor(Math.random() * 16000),
                    name: "User " + Math.floor(Math.random() * 16000),
                    avatar: "User " + Math.floor(Math.random() * 16000)
                };
                var msg = message_1.ELOMessage.get(132);
                Object.assign(msg, data_2);
                var pack = msg.pack();
                pools.push({ pack: pack, data: data_2 });
            }
        });
        pools.forEach(function (_a) {
            var pack = _a.pack, data = _a.data;
            console.log("pack size=" + pack.length + " <" + pack + ">");
            var unpackMsg = message_1.ELOMessage.unpack(pack);
            var unpackData = {};
            Object.keys(data).forEach(function (k) {
                if (unpackMsg[k] instanceof buffer_1.Buffer) {
                    unpackData[k] = unpackMsg[k].toString();
                }
                else {
                    unpackData[k] = unpackMsg[k];
                }
            });
            assert_1.default.equal(JSON.stringify(unpackData), JSON.stringify(data));
            console.log("unpacked size=" + buffer_1.Buffer.from(JSON.stringify(unpackData)).length + "  <" + JSON.stringify(unpackData) + ">");
        });
        var ELOMsgGSReady3 = /** @class */ (function (_super) {
            __extends(ELOMsgGSReady3, _super);
            function ELOMsgGSReady3() {
                var _this = _super.call(this, 133, {
                    avatar: types_1.BINARY,
                    name: types_1.BINARY,
                    score: types_1.UINT32
                }) || this;
                _this.score = 0;
                _this.name = buffer_1.Buffer.from("");
                _this.avatar = buffer_1.Buffer.from("");
                return _this;
            }
            ELOMsgGSReady3.prototype.reset = function () {
                this.score = 0;
                this.name = buffer_1.Buffer.from("");
                this.avatar = buffer_1.Buffer.from("");
            };
            ELOMsgGSReady3.prototype.test = function () {
                return 100;
            };
            return ELOMsgGSReady3;
        }(message_1.ELOMessage));
        message_1.ELOMessage.register(new ELOMsgGSReady3());
        var aa = message_1.ELOMessage.get(133);
        // console.log({ aa }, aa.test());
    });
});
