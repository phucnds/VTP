"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_1 = require("buffer/");
var types_1 = require("./types");
var ELOBufferWriter = /** @class */ (function () {
    function ELOBufferWriter(buffer, offset) {
        this._buffer = buffer;
        this._pos = offset || 0;
        this._offset = offset || 0;
    }
    ELOBufferWriter.prototype.reset = function (buffer) {
        this._pos = this._offset;
        if (buffer) {
            this._buffer = buffer;
        }
    };
    ELOBufferWriter.prototype.getBuffer = function () {
        return buffer_1.Buffer.from(this._buffer.slice(this._offset, this._pos));
    };
    ELOBufferWriter.prototype.writeSize = function () {
        return this._pos - this._offset;
    };
    ELOBufferWriter.prototype.writeInt8 = function (val) {
        this._buffer.writeInt8(val, this._pos);
        this._pos += 1;
    };
    ELOBufferWriter.prototype.writeInt16 = function (val) {
        this._buffer.writeInt16BE(val, this._pos);
        this._pos += 2;
    };
    ELOBufferWriter.prototype.writeInt32 = function (val) {
        this._buffer.writeInt32BE(val, this._pos);
        this._pos += 4;
    };
    ELOBufferWriter.prototype.writeUInt8 = function (val) {
        this._buffer.writeUInt8(val, this._pos);
        this._pos += 1;
    };
    ELOBufferWriter.prototype.writeUInt16 = function (val) {
        this._buffer.writeUInt16BE(val, this._pos);
        this._pos += 2;
    };
    ELOBufferWriter.prototype.writeUInt32 = function (val) {
        this._buffer.writeUInt32BE(val, this._pos);
        this._pos += 4;
    };
    ELOBufferWriter.prototype.writeFloat = function (val) {
        this._buffer.writeFloatBE(val, this._pos);
        this._pos += 4;
    };
    ELOBufferWriter.prototype.writeBool = function (val) {
        this._buffer.writeInt8(val ? 1 : 0, this._pos);
        this._pos += 1;
    };
    ELOBufferWriter.prototype.writeBinary = function (val) {
        var buf = buffer_1.Buffer.from(val);
        this.writeUInt16(buf.length);
        buf.copy(this._buffer, this._pos);
        this._pos += buf.length;
    };
    ELOBufferWriter.prototype.writeByType = function (type, val) {
        switch (type) {
            case types_1.INT8:
                return this.writeInt8(val);
            case types_1.INT16:
                return this.writeInt16(val);
            case types_1.INT32:
                return this.writeInt32(val);
            case types_1.UINT8:
                return this.writeUInt8(val);
            case types_1.UINT16:
                return this.writeUInt16(val);
            case types_1.UINT32:
                return this.writeUInt32(val);
            case types_1.BOOL:
                return this.writeBool(!!val);
            case types_1.FLOAT:
                return this.writeFloat(val);
        }
    };
    return ELOBufferWriter;
}());
exports.ELOBufferWriter = ELOBufferWriter;
